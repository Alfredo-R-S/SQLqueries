3.9: COMMON TABLE EXPRESSIONS

Answer the business questions from steps 1 and 2 of task 3.8 using CTEs 
1. Rewrite your queries from steps 1 and 2 of task 3.8 as CTEs. 
2. Copy-paste your CTEs and their outputs into your answers document. 
 
STEP 1 OF TASK 3.8: AVERAGE AMOUNT PAID BY THE TOP 5 CUSTOMERS. 
CTE QUERY # 1.1 
In this query, the complete query from Task 3.8-Step 1 is used as a temporary table within the 
CTE, serving as the foundation for subsequent queries in the CTE structure. 
WITH total_amount_paid AS ( 
    SELECT  
        A.customer_id,  
        A.first_name,  
        A.last_name,  
        c.city,  
        d.country,  
        SUM(amount) AS total_amount_paid  
    FROM customer A  
    INNER JOIN address B ON A.address_id = B.address_id  
    INNER JOIN city C ON B.city_id = C.city_id  
    INNER JOIN country D ON C.country_id = D.country_id  
    INNER JOIN payment E ON A.customer_id = E.customer_id  
    WHERE c.city IN ( 
        SELECT C.city  
        FROM customer A  
        INNER JOIN address B ON A.address_id = B.address_id  
        INNER JOIN city C ON B.city_id = C.city_id  
        INNER JOIN country D ON C.country_id = D.country_id  
        WHERE D.country IN ( 
            SELECT D.country  
            FROM customer A  
            INNER JOIN address B ON A.address_id = B.address_id  
            INNER JOIN city C ON B.city_id = C.city_id  
            INNER JOIN country D ON C.country_id = D.country_id  
            GROUP BY D.country  
            ORDER BY COUNT(customer_id) DESC  
            LIMIT 10 
        )  
        GROUP BY D.country, C.city  
        ORDER BY COUNT(customer_id) DESC  
        LIMIT 10 
    )  
    GROUP BY A.customer_id, A.first_name, A.last_name, d.country, c.city  
    ORDER BY total_amount_paid DESC  
    LIMIT 5 
) 
 
SELECT ROUND(AVG(total_amount_paid), 2) AS avg_top_5_customers 
FROM total_amount_paid;



CTE QUERY # 1.2 
In this CTE query, all the subqueries from the query used in Task 3.8-Step1 have been 
transformed into temporary tables, which serve as the foundation for the subsequent queries in 
the CTE structure. 
WITH top_countries AS ( 
    SELECT D.country  
    FROM customer A  
    INNER JOIN address B ON A.address_id = B.address_id  
    INNER JOIN city C ON B.city_id = C.city_id  
    INNER JOIN country D ON C.country_id = D.country_id  
    GROUP BY D.country  
    ORDER BY COUNT(A.customer_id) DESC  
    LIMIT 10 
),  
top_cities AS ( 
    SELECT C.city  
    FROM customer A  
    INNER JOIN address B ON A.address_id = B.address_id  
    INNER JOIN city C ON B.city_id = C.city_id  
    INNER JOIN country D ON C.country_id = D.country_id  
    WHERE D.country IN (SELECT country FROM top_countries)  
    GROUP BY D.country, C.city  
    ORDER BY COUNT(A.customer_id) DESC  
    LIMIT 10 
),  
top_customers AS ( 
    SELECT  
        A.customer_id,  
        A.first_name,  
        A.last_name,  
        c.city,  
        d.country,  
        SUM(amount) AS total_amount_paid  
    FROM customer A  
    INNER JOIN address B ON A.address_id = B.address_id  
    INNER JOIN city C ON B.city_id = C.city_id  
    INNER JOIN country D ON C.country_id = D.country_id  
    INNER JOIN payment E ON A.customer_id = E.customer_id  
WHERE c.city IN (SELECT city FROM top_cities)  
GROUP BY A.customer_id, A.first_name, A.last_name, d.country, c.city  
ORDER BY total_amount_paid DESC  
LIMIT 5 
) 
SELECT ROUND(AVG(total_amount_paid), 2) AS avg_top_5_customers 
FROM top_customers;


STEP 2 OF TASK 3.8: HOW MANY OF THE TOP 5 CUSTOMERS YOU IDENTIFIED IN STEP 
1 ARE BASED WITHIN EACH COUNTRY. 
CTE QUERY # 2.1 
In this query, the complete query from Task 3.8-Step 2 is used as a temporary table within the 
CTE, serving as the foundation for subsequent queries in the CTE structure. 
 
WITH top_customers AS ( 
    SELECT  
        A.customer_id,  
        A.first_name,  
        A.last_name,  
        c.city,  
        d.country,  
        SUM(amount) AS total_amount_paid  
    FROM customer A  
    INNER JOIN address B ON A.address_id = B.address_id  
    INNER JOIN city C ON B.city_id = C.city_id  
    INNER JOIN country D ON C.country_id = D.country_id  
    INNER JOIN payment E ON A.customer_id = E.customer_id  
    WHERE c.city IN ( 
        SELECT C.city  
        FROM customer A  
        INNER JOIN address B ON A.address_id = B.address_id  
        INNER JOIN city C ON B.city_id = C.city_id  
        INNER JOIN country D ON C.country_id = D.country_id  
        WHERE D.country IN ( 
            SELECT D.country  
            FROM customer A  
            INNER JOIN address B ON A.address_id = B.address_id  
            INNER JOIN city C ON B.city_id = C.city_id  
            INNER JOIN country D ON C.country_id = D.country_id  
            GROUP BY D.country  
            ORDER BY COUNT(A.customer_id) DESC  
            LIMIT 10 
        )  
        GROUP BY D.country, C.city  
        ORDER BY COUNT(A.customer_id) DESC  
LIMIT 10 
)  
GROUP BY A.customer_id, A.first_name, A.last_name, c.city, d.country  
ORDER BY total_amount_paid DESC  
LIMIT 5 
) 
SELECT  
D.country,  
COUNT(DISTINCT A.customer_id) AS all_customers_count,  
COUNT(DISTINCT top_customers.customer_id) AS top_customers_count  
FROM customer A  
INNER JOIN address B ON A.address_id = B.address_id  
INNER JOIN city C ON B.city_id = C.city_id  
INNER JOIN country D ON C.country_id = D.country_id  
LEFT JOIN top_customers ON top_customers.country = D.country  
GROUP BY D.country  
ORDER BY all_customers_count DESC  
LIMIT 5;


CTE QUERY # 2.2 
In this CTE query, all the subqueries from the query used in Task 3.8-Step 2 have been 
transformed into temporary tables, which serve as the foundation for the subsequent queries in 
the CTE structure. 
 
WITH CountryTop AS ( 
    SELECT D.country 
    FROM customer A  
    INNER JOIN address B ON A.address_id = B.address_id  
    INNER JOIN city C ON B.city_id = C.city_id  
    INNER JOIN country D ON C.country_id = D.country_id  
    GROUP BY D.country  
    ORDER BY COUNT(A.customer_id) DESC  
    LIMIT 10 
),  
CityTop AS ( 
    SELECT D.country, C.city 
    FROM customer A  
    INNER JOIN address B ON A.address_id = B.address_id  
    INNER JOIN city C ON B.city_id = C.city_id  
    INNER JOIN country D ON C.country_id = D.country_id  
    WHERE D.country IN (SELECT country FROM CountryTop) 
    GROUP BY D.country, C.city  
    ORDER BY COUNT(A.customer_id) DESC  
    LIMIT 10 
), 
TopCustomers AS ( 
    SELECT A.customer_id, A.first_name, A.last_name, C.city, D.country, SUM(E.amount) AS total_amount_paid  
    FROM customer A  
    INNER JOIN address B ON A.address_id = B.address_id  
    INNER JOIN city C ON B.city_id = C.city_id  
    INNER JOIN country D ON C.country_id = D.country_id  
    INNER JOIN payment E ON A.customer_id = E.customer_id  
    WHERE (C.city, D.country) IN (SELECT city, country FROM CityTop) 
    GROUP BY A.customer_id, A.first_name, A.last_name, C.city, D.country  
    ORDER BY total_amount_paid DESC  
    LIMIT 5 
) 
SELECT D.country,  
COUNT(DISTINCT A.customer_id) AS all_customers_count,  
COUNT(DISTINCT top_customers.customer_id) AS top_customers_count  
FROM customer A  
INNER JOIN address B ON A.address_id = B.address_id  
INNER JOIN city C ON B.city_id = C.city_id  
INNER JOIN country D ON C.country_id = D.country_id  
LEFT JOIN TopCustomers top_customers ON top_customers.country = D.country  
GROUP BY D.country  
ORDER BY all_customers_count DESC  
LIMIT 5;
